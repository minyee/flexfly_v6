include debug.ini

congestion_model = pisces

amm_model = amm3
node {
 proc {
  frequency = 100GHz
 }
 job_launcher = greedy_job_launcher

 message_size = 2KB
 model = simple
 nic {
  model = pisces
  negligible_size = 0
  packet_allocator = pisces
  traffic_matrix {
    fileroot = my_spyplot
    type = ascii
    suffix = bytes
  }   
 }
 app1 {
  launch_cmd = aprun -n 216 -N 1
  argv = -i 2
  name = lulesh
  print_times = true
  allocation = random
  indexing = block
  mpi_spyplot = my_spyplots
 }
 
 app2 {
  launch_cmd = aprun -n 216 -N 1
  argv = -i 2
  name = lulesh
  print_times = true
  allocation = random
  indexing = block
  mpi_spyplot = my_spyplots2
 }
 #app3 {
  #argv = -e -i 2 -j 2 -k 1 -x 22 -y 22 -z 22 -N 1 -n 1
  #launch_cmd = aprun -n 4 -N 1
  #name = comd
  #min_op_cutoff = 100000
 #}
 #app4 {
  #launch_cmd = aprun -n 4 -N 1
  #name = hpcg
 #}
}

topology {
 name = flexfly_simplified
 groups = 32
 switches_per_group = 31
 nodes_per_switch = 1
 optical_switch_radix = 5
 use_simplified_model = true 
 link_steal = false
 # use this field to choose between the complicated multiple optical switch
} 

#topology {
# name = torus
# geometry = 4 4 2
# concentration = 2
#}

switch {
 model = pisces
 link {
  #per redundant path
  optical_link_bandwidth = 10GB/s
  electrical_link_bandwidth = 1GB/s
  send_packet_latency = 100ns
  credit_latency = 100ns
 }
 xbar {
  #per tile
  bandwidth = 0.8GB/s
  send_latency = 100ns
  credit_latency = 100ns
  arbitrator = null
 }
 router {
  name = minimal
 }
}
mpi_spyplot = my_spyplots
out_in_latency = 100ns
bandwidth = 1GB/s
hop_latency = 10ns

external_libs = libflexfly.so librunlulesh2_0_3.so librunhpcg_3_0.so libruncomd.so libgreedy_job_launcher.so 
